import java.util.Arrays;

public class MergeSort {

    public static void main(String[] args) {
int[] mergeSortArr = randomArray(25);
        System.out.println("Unsorted Array: " + Arrays.toString(mergeSortArr));
        mergeSort(mergeSortArr, mergeSortArr.length);
        System.out.println("Sorted Array:   " + Arrays.toString(mergeSortArr));
    }
     /*method creates an unsorted array of pseudo-random numbers. Accepts array
    length as argument
    */
    public static int[] randomArray(int l) { 
        int[] result = new int[l];
            for (int i = 0; i < result.length; i++){
             result[i] = (int) (Math.random() * 100);
            } 
        return result;    
    }
    
    public static void mergeSort(int[] arr, int n) {
        if (n < 2) {
            return;
        }
        
        int mid = n / 2;
        // divide array into 2 new arrays
        int[] l = new int[mid];
        int[] r = new int [n - mid];
        
        // next two loops: populate new arrays half to l and half to r
        for (int i = 0; i < mid; i++){
            l[i] = arr[i];
        }
        for (int j = mid; j < n; j++){
            r[j - mid] = arr[j];
        }
        // recursive calls for both new arrays
        mergeSort(l, mid);
        mergeSort(r, n - mid);
        
        merge(arr, l, r, mid, n - mid);
    }
    public static void merge(int[] arr, int[] l, int[] r, int left, int right) {
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < left && j < right) {
            if (l[i] <= r[j]) {
                arr[k++] = l[i++];
            }
            else {
                arr[k++] = r[j++];
            }
        }
        while (i < left) {
            arr[k++] = l[i++];
        }
        while (j < right) {
            arr[k++] = r[j++];
        }
    }
    
}
